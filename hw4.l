(defun MY-LENGTH (L)
  (cond
    ((null L) 0)
    (t  (+ 1 (MY-LENGTH (cdr L))))
  )
)
(defun MY-LENGTH-TEST ()
  (print "TESTING MY-LENGTH...")
  (print (MY-LENGTH NIL)) ; 0
  (print (MY-LENGTH '(B (A B C)))) ; 2
  (print (MY-LENGTH '(A (((B))) C))) ; 3
  (print (MY-LENGTH '(A B C))) ; 3
)
(defun MY-MEMQ (A L)
  (cond
    ((eq A (car L)) L)
    ((null L) NIL)
    (t (MY-MEMQ A (cdr L)))
  )
)
(defun MY-MEMQ-TEST ()
  (print "TESTING MY-MEMQ...")
  (print (MY-MEMQ 'A NIL)) ; NIL
  (print (MY-MEMQ 'B '(A B C))) ; (B C)
  (print (MY-MEMQ 'D '(A B C D E F G))) ; (D E F G)
  (print (MY-MEMQ 'D '(A B C D))) ; (D)
  (print (MY-MEMQ 'D '(A B C))) ; NIL
)
(defun MY-APPEND (L1 L2)
  (cond
    ((null L1) L2)
    ((null L2) L1)
    (t (cons (car L1) (MY-APPEND (cdr L1) L2)))
  )
)
(defun MY-APPEND-TEST ()
  (print "TESTING MY-APPEND...")
  (print (MY-APPEND '(A B C) '(D E F))) ; (A B C D E F)
  (print (MY-APPEND '((A) (B) (C)) '((D) (E) (F)))) ; ((A) (B) (C) (D) (E) (F))
  (print (MY-APPEND NIL '(D E F))) ; (D E F)
  (print (MY-APPEND '(A B C) NIL)) ; (A B C)
)
(defun MY-REVERSE (L)
  (cond
    ((null L) NIL)
    (t (append (MY-REVERSE (cdr L)) (list (car L))))
  )
)
(defun MY-REVERSE-TEST ()
  (print "TESTING MY-REVERSE...")
  (print (MY-REVERSE NIL)) ; NIL
  (print (MY-REVERSE '(A))) ; (A)
  (print (MY-REVERSE '(1 2 3 4 5))) ; (5 4 3 2 1)
  (print (MY-REVERSE '((1 2 3) 4 ((5 6))))) ; (((5 6)) 4 (1 2 3))
)
(defun MY-MAPCAR (F L)
  (cond
    ((null L) NIL)
    (t (cons (apply F (list (car L))) (MY-MAPCAR F (cdr L))))
  )
)
(defun MY-MAPCAR-TEST ()
  (print "TESTING MY-MAPCAR...")
  (print (MY-MAPCAR 'CAR '((A B C) (X Y Z) (1 2 3)))) ; (A X 1)
  (print (MY-MAPCAR 'CDR '((A B C) (X Y Z) (1 2 3)))) ; ((B C) (Y Z) (2 3))
  (print (MY-MAPCAR '1+ '(1 3 5 7))) ; (2 4 6 8)
  (print (MY-MAPCAR 'ATOM '(A (B) C (D) E))) ; (T NIL T NIL T)
)
(defun MY-COPY (L)
  (cond
    ((null L) NIL)
    ((atom L) L)
    (t (cons (car L) (MY-COPY (cdr L))))
  )
)
(defun MY-COPY-TEST ()
  (print "TESTING MY-COPY...")
  (print (MY-COPY '(A B ((C 1)) 2 3))) ; (A B ((C 1)) 2 3)
  (print (MY-COPY '(1 2 3))) ; (1 2 3)
  (print (MY-COPY '(A B . C))) ; (A B . C)
  (print (EQ (SETQ L '(A (B) C)) (MY-COPY L))) ; NIL
)
(defun MY-NTH (L N)
  (cond
    ((null L) nil)
    ((= N 1) L)
    ((= N 0) (cons nil L))
    (t (MY-NTH (cdr L) (1- N)))
  )
)
(defun MY-NTH-TEST ()
  (print "TESTING MY-NTH...")
  (print (MY-NTH '(A B C D E) 1)) ; (A B C D E)
  (print (MY-NTH '(A B C D E) 3)) ; (C D E)
  (print (MY-NTH '(A B C D E) 30)) ; NIL
  (print (MY-NTH '(A B C D E) 0)) ; (NIL A B C D E)
)
(defun MY-REMOVE (X L)
  (cond
    ((null L) NIL)
    ((equal X (car L)) (MY-REMOVE X (cdr L)))
    (t (cons (car L) (MY-REMOVE X (cdr L))))
  )
)
(defun MY-REMOVE-TEST ()
  (print "TESTING MY-REMOVE...")
  (print (MY-REMOVE '(A B) '(A B (A B) A A B (A B)))) ; (A B A A B)
  (print (MY-REMOVE 'A '(A B (A B) A B))) ; (B (A B) B)
)
(defun MY-SUBST (X Y Z)
  (cond	
    ((null Z) Z)
    ((atom (car Z))
      (cond
        ((equal X (car Z)) (cons Y (MY-SUBST X Y (cdr Z))))
        (t (cons (car Z) (MY-SUBST X Y (cdr Z))))
      )
    )
    (t (cons (MY-SUBST X Y (car Z)) (MY-SUBST X Y (cdr Z))))
  )
)
(defun MY-SUBST-TEST ()
  (print "TESTING MY-SUBST...")
  (print (MY-SUBST 'B 'A '(A B (A B) (C (A B))))) ; (A A (A A) (C (A A)))
)
(defun MY-SUBSET (FN L)
  (cond	
    ((null L) L)
    ((apply FN (list (car L))) (cons (car L) (MY-SUBSET FN (cdr L))))
    (t (MY-SUBSET FN (cdr L)))
  )
)
(defun MY-SUBSET-TEST ()
  (print "TESTING MY-SUBSET...")
  (print (MY-SUBSET 'ATOM '(A (B) (C D) E F G))) ; (A E F G)
  (print (MY-SUBSET 'LISTP '(A (B) (C D) E F G))) ; ((B) (C D))
)
(defun MY-ADD (N1 N2)
  (MY-ADD-HELPER N1 N2 0)
)
(defun MY-ADD-HELPER (N1 N2 C)
 (cond
    ((and (null N1) (null N2) (= C 0)) nil)
    (t (let* ((D1 (if N1 (car N1) 0))
              (D2 (if N2 (car N2) 0))
              (S (+ D1 D2 C))
              (NEWC (floor S 10))
             )
          (cons (mod S 10) (MY-ADD-HELPER (if N1 (cdr N1) nil) (if N2 (cdr N2) nil) NEWC))
        )
    )
  )
)
(defun MY-ADD-TEST ()
  (print "TESTING MY-ADD...")
  (print (MY-ADD '(0) '(0))) ; (0)
  (print (MY-ADD '(1) '(1))) ; (2)
  (print (MY-ADD '(9) '(9))) ; (8 1)
  (print (MY-ADD '(1 1 1 1 1 1 1 1 1 1) '(9 9 9 9 9 9 9 9 9 9))) ; (0 1 1 1 1 1 1 1 1 1 1)
  (print (MY-ADD '(1) '(9 9 9 9 9 9 9 9 9 9))) ; (0 0 0 0 0 0 0 0 0 0 1)
)
(defun MY-MERGE (L1 L2)
  (cond
    ((null L1) L2)
    ((null L2) L1)
    ((<= (car L2) (car L1)) (cons (car L2) (MY-MERGE L1 (cdr L2))))
    (t (cons (car L1) (MY-MERGE (cdr L1) L2)))
  )
)
(defun MY-MERGE-TEST ()
  (print "TESTING MY-MERGE...")
  (print (MY-MERGE '(1 3 5 7 9) '(2 4 6 8 10))) ; (1 2 3 4 5 6 7 8 9 10)
  (print (MY-MERGE '(1 2 3 7 8 9) '(4 5 6 10))) ; (1 2 3 4 5 6 7 8 9 10)
  (print (MY-MERGE '(1 2 3) '(4 5 6 7 8 9 10))) ; (1 2 3 4 5 6 7 8 9 10)
  (print (MY-MERGE '(1 3 5 6 7 8 9 10) '(2 4))) ; (1 2 3 4 5 6 7 8 9 10)
  (print (MY-MERGE NIL '(1 2 3 4 5 6 7 8 9 10))) ; (1 2 3 4 5 6 7 8 9 10)
)
(defun MY-SUBLIST (L1 L2)
  (cond
    ((null L1) T)
    ((null L2) nil)
    ((MY-SUBLIST-HELPER L1 L2) T)
    (t (MY-SUBLIST L1 (cdr L2)))
  )
)
(defun MY-SUBLIST-HELPER (L1 L2)
  (cond
    ((null L1) t)
    ((null L2) nil)
    ((equal (car L1) (car L2)) (MY-SUBLIST-HELPER (cdr L1) (cdr L2)))
    (t nil)
  )
)
(defun MY-SUBLIST-TEST ()
  (print "TESTING MY-SUBLIST...")
  (print (MY-SUBLIST '(1 2 3) '(1 2 3 4 5))) ; T
  (print (MY-SUBLIST '(3 4 5) '(1 2 3 4 5))) ; T
  (print (MY-SUBLIST '(C D) '(A B C D E))) ; T
  (print (MY-SUBLIST '(3 4) '(1 2 3 5 6))) ; NIL
  (print (MY-SUBLIST '(1 2 3 4 5) '(3 4 5))) ; NIL
  (print (MY-SUBLIST '(2 4) '(1 2 3 4 5))) ; NIL
  (print (MY-SUBLIST '(1 3 5) '(1 2 3 4 5))) ; NIL
)
(defun MY-ASSOC (A ALIST)
  (cond
    ((null ALIST) nil)
    ((equal A (car (car ALIST))) (car ALIST))
    (t (MY-ASSOC A (cdr ALIST)))
  )
)
(defun MY-ASSOC-TEST ()
  (print "TESTING MY-ASSOC...")
  (print (MY-ASSOC 'A NIL)) ; NIL
  (print (MY-ASSOC 'A '((A . B)(C E F)(B)))) ; (A . B)
  (print (MY-ASSOC 'C '((A . B)(C E F)(B)))) ; (C E F)
  (print (MY-ASSOC 'B '((A . B)(C E F)(B)))) ; (B)
  (print (MY-ASSOC 'F '((A . B)(C E F)(B)))) ; NIL
)
(defun MY-REPLACE (ALIST L)
  (cond
    ((null L) nil)
    (t (cons (MY-REPLACE-HELPER1 ALIST (car L)) (MY-REPLACE ALIST (cdr L))))
  )
)
(defun MY-REPLACE-HELPER1 (ALIST A)
  (cond
    ((atom A) (or (MY-REPLACE-HELPER2 ALIST A) A))
    (t (MY-REPLACE ALIST A))
  )
)
(defun MY-REPLACE-HELPER2 (ALIST A)
  (cond
    ((null ALIST) nil)
    ((eq A (car (car ALIST))) (cdar ALIST))
    (t (MY-REPLACE-HELPER2 (cdr ALIST) A))
  )
)
(defun MY-REPLACE-TEST ()
  (print "TESTING MY-REPLACE...")
  (print (MY-REPLACE '((G . C)(C . G)(T . A)(A . U)) '(G A T C C T C C A T A T A C A A C G G T))) ; (C U A G G A G G U A U A U G U U G C C A) 
  (print (MY-REPLACE '((UCB . UCLA)(UCSD . UCI)(BASKETBALL . TENNIS)) '(UCSD IS PLAYING BASKETBALL AGAINST UCB))) ; (UCI IS PLAYING TENNIS AGAINST UCLA)
)
(defun MY-MAIN () 
  (MY-LENGTH-TEST)
  (MY-MEMQ-TEST)
  (MY-APPEND-TEST)
  (MY-REVERSE-TEST)
  (MY-MAPCAR-TEST)
  (MY-COPY-TEST)
  (MY-NTH-TEST)
  (MY-REMOVE-TEST)
  (MY-SUBST-TEST)
  (MY-SUBSET-TEST)
  (MY-ADD-TEST)
  (MY-MERGE-TEST)
  (MY-SUBLIST-TEST)
  (MY-ASSOC-TEST)
  (MY-REPLACE-TEST)
) 
(MY-MAIN)